@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center">Login</h3>
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label>Email:</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="form-group mt-3">
                            <label>Adgangskode:</label>
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                @errorMessage
                            </div>
                        }

                        <button type="submit" class="btn btn-primary w-100 mt-3">Login</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="google-signin"></div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage;

    [CascadingParameter]
    public EventCallback OnAuthenticationChanged { get; set; }

    private async Task HandleLogin()
    {
        try
        {
            var result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            if (result)
            {
                await OnAuthenticationChanged.InvokeAsync();
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Ugyldigt login forsøg";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"{ex.Message}";
            Console.WriteLine($"Login error: {ex.Message}");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email er påkrævet")]
        [EmailAddress(ErrorMessage = "Ugyldig email adresse")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Adgangskode er påkrævet")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Adgangskoden skal være mindst 8 tegn lang")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", 
            ErrorMessage = "Adgangskoden skal indeholde mindst et lille bogstav, et stort bogstav, et tal og et specialtegn")]
        public string Password { get; set; }
    }
}
